
library(shiny)
library(shinycssloaders)


# 1.1. Set the working directory
setwd("C:/Users/mgenckal/OneDrive - Axon Partners Group/Axon Partners Group - (MG LOCAL)/PIBPT15 - (MG LOCAL)/01. Geomodel/Geomodel interface/Shiny Trials/App-1")

# The DBA projects way of defining choices beforehand rather than inside the UI:
# ------------
# T_Input_Load_Mode <- data.frame(Description=character(),stringsAsFactors = FALSE)
# T_Input_Load_Mode [1,] <- "CO"
# T_Input_Load_Mode [2,] <- "MDF"
# T_Input_Load_Mode [3,] <- "PDP"
# T_Input_Load_Mode [4,] <- "SDP"
# T_Input_Load_Mode [5,] <- "CO_area"
# colnames(T_Input_Load_Mode)[1] <- "Description"
# 
# T_Input_Network <- data.frame(Description=character(),stringsAsFactors = FALSE)
# T_Input_Network [1,] <- "Copper"
# T_Input_Network [2,] <- "Fibre"
# T_Input_Network [3,] <- "Coax"
# colnames(T_Input_Network)[1] <- "Description"  
# 
# T_Execution_Mode <- data.frame(Description=character(),stringsAsFactors = FALSE)
# T_Execution_Mode [1,] <- "KPIs"
# T_Execution_Mode [2,] <- "Generate Routes"
# T_Execution_Mode [3,] <- "Associate Buildings to Access Nodes"
# colnames(T_Execution_Mode)[1] <- "Description"  
# 
# T_Export_Mode <- data.frame(Description=character(),stringsAsFactors = FALSE)
# T_Export_Mode [1,] <- "Export KPIs"
# T_Export_Mode [2,] <- "Export Map"
# colnames(T_Export_Mode)[1] <- "Description"  
# ------------


# My explanation of the UI and some notes for guidance:
# ------------
# Our expectations from the shiny interface before the model.
# 
# 1-
#   For number of segments:
#   2 or 3
# 
# 2-
#   For lex locations available:
#   0 as no or 1 as yes
# 
# 3- 
#   For dimentioning parameters:
#   there should be a box where the number is entered manually
# 
# 4-
#   For inputs:
#   there should be a drop down list that is is either shp or csv
# 
# 5- 
#   For file names:
#   they should be manually written as a text or even better should be selected from a file
# 
# 6- 
#   For coordinate systems:
#   they should be manually written in a box for all
#   (A note: for the first 3, we want them to input the coordinate system of the files uploaded. 
#     For the last one, they should input which coordinate system they want to run them as.(Such as 3812 for Belgium))
# ------------


# Defining the function that will take the geomodel code and the UI inputs and will run and save it's results.
# ------------


# geomodel_code <- file(path = "./data") #NBED. I might have to input the geomodel before UI so later I can update stuff in it
# In theory, what I want to do is I want to save user inputs in UI and then update the associated parameters in the geomodel_code
# And then run the geomodel_code in the server function.

# source("geomodel code and related codes to input into shiny/Scripts/osgeomodel - final - v1.1 - Trial MG LOCAL.R")
# This line would run the whole model and that takes too long, ı want it to only run once with the inputs.

# This is the function to run the model
run_model_with_inputs <- function(inputs) { #Should it be function(inputs, outputs) ??
  
  # To define the global variables from the UI inputs. "inputs" is a list created in the server function.
  no_of_segments  <- inputs$no_of_segments
  lex_locations_available  <- inputs$lex_locations_available
  separate_HH_per_DPs_by_building_type <- inputs$separate_HH_per_DPs_by_building_type
  split_minisections_further <- inputs$split_minisections_further
  HH_per_LEX <- inputs$HH_per_LEX
  HH_per_OFP <- inputs$HH_per_OFP 
  HH_per_DP <- inputs$HH_per_DP 
  HH_per_SDU_DP <- inputs$HH_per_SDU_DP 
  HH_per_MDU_DP <- inputs$HH_per_MDU_DP 
  sq_range <- inputs$sq_range 
  interval <- inputs$interval
  type_buildings_file <- inputs$type_buildings_file
  type_lex_file <- inputs$type_lex_file
  buildings_file_name <- inputs$buildings_file_name
  roads_file_name <- inputs$roads_file_name
  lex_file_name <- inputs$lex_file_name
  EPSG_origin_buldings <- inputs$EPSG_origin_buldings
  EPSG_origin_roads <- inputs$EPSG_origin_roads
  EPSG_origin_lex <- inputs$EPSG_origin_lex
  EPSG_for_calculations <- inputs$EPSG_for_calculations
  
  # Set the working directory
  setwd("C:/Users/mgenckal/OneDrive - Axon Partners Group/Axon Partners Group - (MG LOCAL)/PIBPT15 - (MG LOCAL)/01. Geomodel/Geomodel interface/Shiny Trials/App-1")
  # Source the main_code.R file
  source("geomodel code and related codes to input into shiny/Scripts/osgeomodel_final_v012_noparameters_MG_LOCAL.R")  
  #source("geomodel code and related codes to input into shiny/Scripts/osgeomodel_final_v012_noparameters_MG_LOCAL.R",local = TRUE) 
  # local = FALSE (the default) corresponds to the user's workspace (the global environment) and TRUE to the environment from which source is called.
  
  # NBED: The above source and the below main code might be making the geomodel script run twice.
  # It is normally not advised but making the user inputs saved in the global environment in the same way I create them in the inputs list in the server function...
  # and just running the source function above with a geomodel where the parameters are commented out might work.
  
  # # Run the main code by passing inputs as arguments. But I think this assumes it is a function while it isn't.
  # osgeomodel_final_v012_noparameters_MG_LOCAL(no_of_segments = inputs$no_of_segments,
  #                                             lex_locations_available = inputs$lex_locations_available,
  #                                             separate_HH_per_DPs_by_building_type = inputs$separate_HH_per_DPs_by_building_type,
  #                                             split_minisections_further = inputs$split_minisections_further,
  #                                             HH_per_LEX = inputs$HH_per_LEX, 
  #                                             HH_per_OFP = inputs$HH_per_OFP, 
  #                                             HH_per_DP = inputs$HH_per_DP, 
  #                                             HH_per_SDU_DP = inputs$HH_per_SDU_DP, 
  #                                             HH_per_MDU_DP = inputs$HH_per_MDU_DP, 
  #                                             sq_range = inputs$sq_range, 
  #                                             interval = inputs$interval,
  #                                             type_buildings_file = inputs$type_buildings_file,
  #                                             type_lex_file = inputs$type_lex_file,
  #                                             buildings_file_name = inputs$buildings_file_name,
  #                                             roads_file_name = inputs$roads_file_name,
  #                                             lex_file_name = inputs$lex_file_name,
  #                                             EPSG_origin_buldings = inputs$EPSG_origin_buldings,
  #                                             EPSG_origin_roads = inputs$EPSG_origin_roads,
  #                                             EPSG_origin_lex = inputs$EPSG_origin_lex,
  #                                             EPSG_for_calculations = inputs$EPSG_for_calculations)
  
  # Save the intermediate results of the model
  saveRDS(data_table, file = "geomodel code and related codes to input into shiny/Outputs/data_table.rds")
  
  return("Model run complete!")
}
# ------------



# ------------
ui = navbarPage(
  
  title = h3(strong("BIPT FTTH Bottom-Up Cost Model")),
  
  tabPanel(title = h4("Introduction"),
           
             fluidRow
             (
               column(6,
                      img(src = "Logo_Axon.png") #type the name of the axon alone or both Axon and BIPT's logos merged together pdf file here.
               )
             ),
             br(), # This line gives a blank space
             fluidRow # this command makes the boxes and texts fit the users screen size.
             (
               column(6,
                      h3(strong("BIPT FTTH Bottom-Up Cost Model"))
               )
             ),
           fluidRow
           (
             mainPanel(
               p("This interface is used to select the model’s main available options,
                 enter the required parameters, 
                 and run the model. "),
               
               p("NOTE: We can type and put anything here. This is supposed to be the title page that gives a brief introduction to the user."),
               
               # NBED Should there be an output as a text after the model is ran?
               verbatimTextOutput("result") # verbatimTextOutput or textOutput ?
               
             ) 

             )
           ),
  
  tabPanel(title = h4("Network Architecture"),
      
           h4("Setting the Network Architecture"),
           
           wellPanel(
             fluidRow
             (
               # 1.1- number of segments
               # This refers to how many nodes will be calculated as outputs. The options are 2 and 3.
               column(2,
                      selectInput("no_of_segments", label = strong("Number of Segments"),
                                  choices = list("2" = 2, "3" = 3), selected = 1, size="1",selectize = FALSE)),
               
               # 1.2- For lex locations available:
               # If the network architecture is scorched node (if the locations of the LEX are available) this will be 1, and 0 otherwise (scorched earth)
               column(2,
                      selectInput("lex_locations_available", label = strong("Are Local Exchange Locations Available?"),
                                  choices = list("Yes" = 1, "No" = 0), selected = 1, size="1",selectize = FALSE)),
               
               # 1.3- For checking id # of DP's per building is seperated:
               # If the number of DPs per building is separated, 1 should be selected, and 0 otherwise
               column(2,
                      selectInput("separate_HH_per_DPs_by_building_type", label = strong("Are the number of DPs per building is separated?"),
                                  choices = list("Yes" = 1, "No" = 0), selected = 1, size="1",selectize = FALSE)),
               
               # 1.4- For splitting minisections further:
               # If the user wants to split the minisections further, this should be set to 1
               column(2,
                      selectInput("split_minisections_further", label = strong("Should the minisections be seperated further?"),
                                  choices = list("Yes" = 1, "No" = 0), selected = 1, size="1",selectize = FALSE)),
               
               column(2
               ),
               # column(2,
               #        actionButton("F_Load", " IMPORT ", style="padding:15px; font-size:18px; width:150px; height: 58px;")
               # )
             )
           )     
           
  ),
  
  tabPanel(title = h4("Dimentioning Parameters"),
          
           h4("Setting the Dimentioning Parameters"),
           
           wellPanel(
             fluidRow
             (
               # 2.1- Number of households per Local Exchange
               # this refers to the uppermost node in the network architecture
               column(2,
                      textInput("HH_per_LEX", label = strong("Number of households per Local Exchange"), 
                                value = "Enter number...")),
               
               # 2.2- Number of households per Local Exchange
               # this refers to the intermediate node in the network architecture
               # relevant only in a network with 3 segments. If 2, ignore this.
               # NBED: (Haven't added anything to check this. Check later. 
               column(2,
                      textInput("HH_per_OFP", label = strong("Number of households per OFP"), 
                                value = "Enter number...")),
               
               # 2.3- Number of households per DP
               # this refers to the first intermediate node in the network architecture, where buildings are directly connected to.
               column(2,
                      textInput("HH_per_DP", label = strong("Number of households per DP"), 
                                value = "Enter number...")),
               
               # 2.4- Number of households per DP
               # this refers to the first intermediate node in the network architecture, where buildings are directly connected to.
               column(2,
                      textInput("HH_per_SDU_DP", label = strong("Number of households per SDU DP"), 
                                value = "Enter number...")),
               
               # 2.5- Number of households per MDU DP
               # this refers to the first intermediate node in the network architecture, where buildings are directly connected to.      
               column(2,
                      textInput("HH_per_MDU_DP", label = strong("Number of households per SDU DP"), 
                                value = "Enter number...")),
               
               # 2.6- Range of squares around the Local Exchanges
               # The range to define the squares around the local exchanges in order to define the network graphs      
               column(2,
                      textInput("sq_range", label = strong("Range of squares around the Local Exchanges"), 
                                value = "Enter number...")),
               
               # 2.7- Maximum length of the road segments
               # Maximum length of the road segments in order to increase the granularity of the results     
               column(2,
                      textInput("interval", label = strong("Maximum length of the road segments"), 
                                value = "Enter number...")),
               
               column(2
               ),
               # column(2,
               #        actionButton("F_Run", " RUN ", style="padding:15px; font-size:18px; width:150px; height: 58px;")
               # )
             )
           ) 
           
  ), 
  
  tabPanel(title = h4("File Input's"),

           h4("Buildings, Roads and Local Exchanges Input's"),
           
           wellPanel(
             fluidRow
             (
               # Buildings, roads and local exchange input files
               
               # 3.1- For Buildings Inputs Format:
               #NBED: this might be better to be implemented as a choice box. Decide later.
               column(2, 
                      textInput("type_buildings_file", label = strong("Building Inputs File Format:"), 
                                value = "Type shp or csv...")),
               
               # 3.2- For Roads Inputs Format:
               #NBED: this might be better to be implemented as a choice box. Decide later.
               column(2, 
                      textInput("type_roads_file", label = strong("Roads Inputs File Format:"), 
                                value = "Type shp or csv...")),
               
               # 3.3- For Roads Inputs Format:
               #NBED: this might be better to be implemented as a choice box. Decide later.
               column(2, 
                      textInput("type_lex_file", label = strong("Local Exchanges Inputs File Format:"), 
                                value = "Type shp or csv...")),
               
               
               # 3.4- For Buildings Inputs Name:
               column(2, 
                      textInput("buildings_file_name", label = strong("Building Inputs File Name:"), 
                                value = "Type the name of the file without extension (.shp or .csv)")),
               
               # 3.5- For Roads Inputs Name:
               column(2, 
                      textInput("roads_file_name", label = strong("Roads Inputs File Format:"), 
                                value = "Type the name of the file without extension (.shp or .csv)")),
               
               # 3.6- For Roads Inputs Name:
               column(2, 
                      textInput("lex_file_name", label = strong("Local Exchanges Inputs File Format:"), 
                                value = "Type the name of the file without extension (.shp or .csv)")),
               
               # # 3.7- For file upload:
               # # We should keep in mind that they can directly upload the file by choosing too.
               # column(3,
               #        fileInput("file_name", label = strong("They can directly choose the file too!"))),
               
             )
           )
           
  ),
  
  tabPanel(title = h4("Cartesian System of Reference"),

           h4("Setting the origin and preferred Cartesian system of reference to be used"),
           
           wellPanel(
             fluidRow
             (
               # 4.1- Buildings inputs' original Cartesian system
               # Numeric code of the buildings inputs' original Cartesian system
               column(2,
                      textInput("EPSG_origin_buldings", label = strong("Enter Buildings inputs' original Cartesian system"), 
                                value = "Enter number...")),
               
               # 4.2- Roads inputs' original Cartesian system
               # Numeric code of the roads inputs' original Cartesian system
               column(2,
                      textInput("EPSG_origin_roads", label = strong("Enter Roads inputs' original Cartesian system"), 
                                value = "Enter number...")),
               
               # 4.3- Local exchange inputs' original Cartesian system
               # Numeric code of the local exchange inputs' original Cartesian system
               column(2,
                      textInput("EPSG_origin_lex", label = strong("Enter Local exchange inputs' original Cartesian system"), 
                                value = "Enter number...")),
               
               # 4.4- Cartesian system to be used throughout the analysis
               # Numeric code of the Cartesian system to be used throughout the analysis
               column(2,
                      textInput("EPSG_for_calculations", label = strong("Enter Cartesian system to be used throughout the analysis"), 
                                value = "Enter number...")),
               
               column(2
               ),
               # column(2,
               #        actionButton("F_Load", " IMPORT ", style="padding:15px; font-size:18px; width:150px; height: 58px;")
               # )
             )
           )
           
  ),
  
  tabPanel(title = h4("Run"),
           # 5- The run button to run the model
           # Input: actionButton() to defer the rendering of output
           # until the user explicitly clicks the button (rather than
           # doing it immediately when inputs change). This is useful if
           # the computations required to render output are inordinately
           # time-consuming.
           column(2,
           actionButton("run_the_model", "Run the model", style="padding:15px; font-size:18px; width:150px; height: 58px;")
           )
           
           # column(2,
           #        actionButton("F_Run", " RUN ", style="padding:15px; font-size:18px; width:150px; height: 58px;")
           # )
           
  ),
)
# ------------
  
  # Define server logic ----
  server = function(input, output, session) {
    
    # There should be some kind of a reactive event which would run the model if the user clicks the run the model button in UI.
    #eventReactive() # NBED: We could also use bindEvent or observeEvent somehow.
    
    #Run the model when the user clicks the "run_the_model" button
    observeEvent(input$run_the_model(), { # NBED: ı don't know if there should be () after input$run_the_model.
      
      #Show a spinner while the model is running
      withSpinner(
        # create a list of inputs
        inputs <- list(
          # the input list elements
          no_of_segments <- input$no_of_segments,
          lex_locations_available <- input$lex_locations_available,
          separate_HH_per_DPs_by_building_type <- input$separate_HH_per_DPs_by_building_type,
          split_minisections_further <- input$split_minisections_further,
          HH_per_LEX <- input$HH_per_LEX,
          HH_per_OFP <- input$HH_per_OFP,
          HH_per_DP <- input$HH_per_DP,
          HH_per_SDU_DP <- input$HH_per_SDU_DP,
          HH_per_MDU_DP <- input$HH_per_MDU_DP,
          sq_range <- input$sq_range,
          interval <- input$interval,
          type_buildings_file <- input$type_buildings_file,
          type_lex_file <- input$type_lex_file,
          buildings_file_name <- input$buildings_file_name,
          roads_file_name <- input$roads_file_name,
          lex_file_name <- input$lex_file_name,
          EPSG_origin_buldings <- input$EPSG_origin_buldings,
          EPSG_origin_roads <- input$EPSG_origin_roads,
          EPSG_origin_lex <- input$EPSG_origin_lex,
          EPSG_for_calculations <- input$EPSG_for_calculations),
  
    # Code to run when the button is pressed
    output$result <- renderText({ # I don't know if it should be <- or = // Also, whether it should be renderPrint or renderText
      
      #The models lines should probably be down below.
      run_model_with_inputs(inputs)
      # return("Model run complete!")
    }),
    label = "Running Model...",
    color = "black"
      )
  })
    # NBED: Important to terminate the R process when the shiny app session ends
    session$onSessionEnded(function() {
      stopApp()
    })
  }

# Run the app ----
shinyApp(ui = ui, server = server)
